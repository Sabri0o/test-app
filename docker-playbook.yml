- hosts: all
  become: true
  tasks:
    - name: Install aptitude
      apt: name=aptitude state=latest update_cache=yes force_apt_get=yes

    - name: Install required dependencies
      apt: name={{item}} state=latest update_cache=yes
      loop:
        [
          "apt-transport-https",
          "ca-certificates",
          "curl",
          "software-properties-common",
          "python3-pip",
          "virtualenv",
          "python3-setuptools",
        ]

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: Update apt and install Docker CE
      apt: update_cache=yes name=docker-ce state=latest
    - name: Install Docker Module for Python
      pip:
        name: docker

    - name: Start Docker service
      service:
        name: "docker"
        state: started

    - name: Create network
      docker_network:
        name: backend
        name: frontend
    
    - name: Create Postgres Container 
      docker_container: 
        name: postgres
        image: postgres:latest
        state: started
        ports: 
          - "5432:5432"
        volumes: 
          - test-app-db:/var/lib/postgresql/data
        env:
        	POSTGRES_PASSWORD: secret
          POSTGRES_DB: database
          POSTGRES_USER: user
        networks:
          - backend

    - name: Build Server Image
      docker_image:
        path: /path/to/build/dir   # Will be the path to a directory containing the context and Dockerfile for building an image. 
        name: back-end

    - name: Build Client Image
      docker_image:
        path: /path/to/build/dir   # Will be the path to a directory containing the context and Dockerfile for building an image. 
        name: front-end
    
    - name: Create Server Container 
      docker_container: 
        name: server
        image: back-end
        ports: 
          - "5000:5000"
        env:
        	HOST: postgres
          USER: user
          PASSWORD: secret
          DB: database
        networks:
          - backend
          - frontend

    - name: Create Client Container 
      docker_container: 
        name: server
        image: front-end
        ports: 
          - "8080:8080"
        env:
        	EXPRESS_HOST: server
        networks:
          - frontend
        
        